import { Checkbox } from "@/components/ui/Checkbox";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/Select";
import { VersionsGroupedByMajor, getT3Versions } from "@/lib/utils";
import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useEffect, useMemo, useState } from "react";

const Home: NextPage = () => {
  const [versionOptions, setVersionOptions] = useState<VersionsGroupedByMajor>(
    {}
  );
  const [currentVersion, setCurrentVersion] = useState<string | null>(null);
  const [upgradeVersion, setUpgradeVersion] = useState<string | null>(null);
  const [features, setFeatures] = useState({
    NextAuth: false,
    Prisma: false,
    TRPC: false,
    Tailwind: false,
  });

  const upgradeVersionOptions = useMemo(() => {
    if (!currentVersion) return {};
    const [major, minor, patch] = currentVersion.split(".");
    const filteredVersions = Object.keys(versionOptions)
      .filter((majorVersion) => Number(majorVersion) >= Number(major))
      .reduce((acc, majorVersion) => {
        if (Number(majorVersion) === Number(major)) {
          const initialValues = versionOptions[majorVersion];
          const filterValue = (version: string) => {
            const [, versionMinor, versionPatch] = version.split(".");
            if (Number(versionMinor) > Number(minor)) return true;
            if (
              Number(versionMinor) === Number(minor) &&
              Number(versionPatch) > Number(patch)
            )
              return true;
            return false;
          };
          acc[majorVersion] = initialValues?.filter(filterValue) || [];
        } else {
          acc[majorVersion] = versionOptions[majorVersion] || [];
        }
        return acc;
      }, {} as VersionsGroupedByMajor);
    return filteredVersions;
  }, [currentVersion, versionOptions]);

  useEffect(() => {
    const loadT3Versions = async () => {
      const t3Versions = await getT3Versions();
      setVersionOptions(t3Versions);
    };

    loadT3Versions();
  }, []);

  const renderSelectContent = (options: VersionsGroupedByMajor) => {
    if (!Object.keys(options).length) return null;
    return Object.keys(options)
      .filter((majorVersion) => options[majorVersion]?.length)
      .map((majorVersion) => (
        <SelectGroup key={majorVersion}>
          <SelectLabel>{`${majorVersion}.x`}</SelectLabel>
          {options[majorVersion]?.map((version) => (
            <SelectItem key={version} value={version}>
              {version}
            </SelectItem>
          ))}
        </SelectGroup>
      ));
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Create <span className="text-[hsl(280,100%,70%)]">T3</span> App
          </h1>
          <Select onValueChange={(value) => setCurrentVersion(value)}>
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Select a version" />
            </SelectTrigger>
            <SelectContent>{renderSelectContent(versionOptions)}</SelectContent>
          </Select>
          <Select
            onValueChange={(value) => setUpgradeVersion(value)}
            disabled={!currentVersion}
          >
            <SelectTrigger className="w-[180px]">
              <SelectValue
                placeholder={
                  currentVersion
                    ? "Select a version"
                    : "Please select the current version first"
                }
              />
            </SelectTrigger>
            <SelectContent>
              {renderSelectContent(upgradeVersionOptions)}
            </SelectContent>
          </Select>

          <div className="flex items-center gap-6 text-white">
            {Object.keys(features).map((feature) => (
              <div className="flex items-center space-x-4" key={feature}>
                <Checkbox
                  id={feature}
                  checked={features[feature as keyof typeof features]}
                  onCheckedChange={(value) =>
                    value !== "indeterminate"
                      ? setFeatures((prev) => ({
                          ...prev,
                          [feature]: value,
                        }))
                      : null
                  }
                />
                <label
                  htmlFor={feature}
                  className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                >
                  {feature}
                </label>
              </div>
            ))}
          </div>

          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/usage/first-steps"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">First Steps →</h3>
              <div className="text-lg">
                Just the basics - Everything you need to know to set up your
                database and authentication.
              </div>
            </Link>
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/introduction"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">Documentation →</h3>
              <div className="text-lg">
                Learn more about Create T3 App, the libraries it uses, and how
                to deploy it.
              </div>
            </Link>
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
